name: PitchBlack Recovery Project Builder
on:
  workflow_dispatch:
    inputs:
      MANIFEST_BRANCH:
        description: 'PBRP Manifest Branch (选择PBRP源码分支)'
        required: true
        default: 'android-12.1'
        type: choice
        options:
        - android-14.0
        - android-12.1
        - android-11.0
        - android-10.0
        - android-9.0
        - android-8.1
        - android-7.1
        - android-6.0
      DEVICE_TREE:
        description: 'Custom Recovery Tree URL (设备树GitHub仓库地址)'
        required: true
        default: 'https://github.com/enter_username/repo_name'
      DEVICE_TREE_BRANCH:
        description: 'Device Tree Branch (设备树分支，可选，留空则用默认分支)'
        required: false
        default: ''
      BUILD_TARGET:
        description: 'Build Target (构建目标：Android 11+推荐选pbrp)'
        required: true
        default: 'recovery'
        type: choice
        options:
        - pbrp
        - recovery
        - boot
        - vendorboot
      LDCHECK_PATH:
        description: 'Path for dependency check (依赖检查路径，可选)'
        required: false
        default: 'recovery/root/system/bin/qseecomd'
      upload_releases:
        description: 'Whether to upload to GitHub Releases (是否上传到Release)'
        required: true
        default: 'false'
        type: boolean
      DEVICE_NAME:
        description: 'Device Name (设备名称，如lenovo_tb375fc，需与设备树匹配)'
        required: true
        default: 'your_device_name'

jobs:
  build:
    name: Build PBRP by ${{ github.actor }}
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id  # 仅仓库所有者可触发
    env:
      DEBIAN_FRONTEND: noninteractive  # 禁用APT交互提示
    permissions:
      contents: write  # 授予写入仓库内容权限（用于上传Release/Artifacts）
      
    steps:
    # 1. 初始化构建时间变量
    - name: Initial Setup
      run: |
        echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV
        echo "BUILD_DATE=$(TZ=UTC date +%Y%m%d)" >> $GITHUB_ENV  # 用UTC时间命名，避免时区差异
        
    # 2. 拉取工作流所在仓库代码
    - name: Checkout Workflow Repo
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        fetch-depth: 1
        
    # 3. 清理工作空间（释放磁盘空间）
    - name: Clean-up Unused Files
      uses: rokibhasansagar/slimhub_actions@main
      
    # 4. 设置24GB交换空间（避免构建时内存不足）
    - name: Set Up 24GB Swap Space
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 24
        
    # 5. 修复Java证书缺失问题（避免HTTPS依赖下载失败）
    - name: Fix Java CACerts File Missing
      run: |
        # 安装证书工具并重建Java证书缓存
        sudo apt-get update -y
        sudo apt-get install -y ca-certificates-java
        sudo update-ca-certificates --fresh
        # 验证证书文件是否生成
        if [ -f "/etc/ssl/certs/java/cacerts" ]; then
          echo "✅ Java cacerts file created successfully"
        else
          echo "❌ Error: Java cacerts file still missing" && exit 1
        fi
        
    # 6. 核心步骤：构建PBRP Recovery
    - name: Build PitchBlack Recovery
      uses: mlm-games/pitchblack-pbrp-builder-action@main
      id: build
      with:
        MANIFEST_BRANCH: ${{ inputs.MANIFEST_BRANCH }}
        DEVICE_TREE: ${{ inputs.DEVICE_TREE }}
        DEVICE_TREE_BRANCH: ${{ inputs.DEVICE_TREE_BRANCH }}
        BUILD_TARGET: ${{ inputs.BUILD_TARGET }}
      continue-on-error: false  # 构建失败时立即终止，便于定位问题
        
    # 7. 上传构建产物到Artifacts（临时存储，用于手动下载）
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: ${{ inputs.upload_releases == 'false' || github.event_name != 'workflow_dispatch' }}
      with:
        name: PBRP-Recovery-${{ inputs.DEVICE_NAME }}-${{ env.BUILD_DATE }}
        path: |
          ${{ env.OUTPUT_DIR }}/*.img    # Recovery镜像文件
          ${{ env.OUTPUT_DIR }}/*.tar   # 打包镜像文件
          ${{ env.OUTPUT_DIR }}/*vbmeta* # vbmeta相关文件（用于禁用AVB验证）
          ${{ env.OUTPUT_DIR }}/*.cpio  # CPIO归档文件
        
    # 8. 上传构建产物到GitHub Releases（需手动开启upload_releases）
    - name: Upload to GitHub Releases
      if: success() && inputs.upload_releases == 'true'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ env.OUTPUT_DIR }}/*.img
          ${{ env.OUTPUT_DIR }}/PBRP*.zip  # PBRP刷入包
        name: PBRP for ${{ inputs.DEVICE_NAME }} - ${{ env.BUILD_DATE }}
        tag_name: PBRP-${{ inputs.DEVICE_NAME }}-${{ env.BUILD_DATE }}
        body: |
          ## 🔨 Build Information
          - **Build Date:** ${{ env.BUILD_DATE }} (UTC)
          - **PBRP Branch:** ${{ inputs.MANIFEST_BRANCH }}
          - **Device:** ${{ inputs.DEVICE_NAME }}
          - **Build Target:** ${{ inputs.BUILD_TARGET }}
          
          ## 📌 Source Information
          - **Device Tree:** [${{ inputs.DEVICE_TREE }}](${{ inputs.DEVICE_TREE }}/tree/${{ inputs.DEVICE_TREE_BRANCH || 'main' }})
          - **Device Tree Branch:** ${{ inputs.DEVICE_TREE_BRANCH || 'Default Branch' }}
          
          ## ✅ Build Status
          - Recovery Image MD5: `${{ env.MD5_IMG }}`
          - ZIP Package MD5: `${{ env.MD5_ZIP }}`
          
          > ⚠️ Note: This is an automated build. Test thoroughly before using on main device.
        prerelease: false  # 标记为正式Release（非预发布）
        draft: false       # 直接发布（非草稿）
        
    # 9. 依赖检查（可选，即使失败也不阻断流程）
    - name: Run Dependency Check (LDCHECK)
      uses: mlm-games/ldcheck-action@main
      with:
        OUTPUT_DIR: ${{ env.OUTPUT_DIR }}
        LDCHECKPATH: ${{ inputs.LDCHECK_PATH }}
      continue-on-error: true
        
    # 10. 计算构建耗时
    - name: Calculate Build Duration
      if: always()
      run: |
        BUILD_END=$(date +%s)
        BUILD_DURATION=$((BUILD_END - BUILD_START))
        
        hours=$((BUILD_DURATION / 3600))
        minutes=$(((BUILD_DURATION % 3600) / 60))
        seconds=$((BUILD_DURATION % 60))
        
        echo "📊 Build completed in ${hours}h ${minutes}m ${seconds}s"
        # 保存耗时到环境变量（便于后续扩展）
        echo "BUILD_DURATION=${BUILD_DURATION}" >> $GITHUB_ENV
        echo "BUILD_HOURS=${hours}" >> $GITHUB_ENV
        echo "BUILD_MINUTES=${minutes}" >> $GITHUB_ENV
        echo "BUILD_SECONDS=${seconds}" >> $GITHUB_ENV
        
    # 11. 清理工作空间（释放资源）
    - name: Cleanup Workspace
      if: always()
      run: |
        cd ${{ github.workspace }}
        rm -rf android-recovery  # 删除构建生成的源码目录
        df -h  # 显示磁盘空间使用情况（便于调试）
